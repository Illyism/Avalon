extends layout

block head
  - var body = "index"
  link(rel="canonical", href="http://www.avalon-rpg.com/")

block content
  .ui.content
    .contain
      h1.ui.title.center #{meta.title}
      if meta.subtitle
        h4.ui.sub.title.center #{meta.subtitle}
  
  .ui.content.margin-top
    .contain.large
      if meta.notice && meta.notice.show && meta.notice.text
        .ui.notice.box
          i(class="icon large " + meta.notice.icon)
          | #{meta.notice.text}
      .ui.grid.responsive
        .ten.column.wide.main
          !{extra.intro.html}
          h2.ui.title.underline #{meta.events.title}
          for update in recent.splice(0, meta.events.max)
            .event.ui.box.small
              .date #{update.date}
              .text #{update.item}


        .six.column.wide.sidebar
          form(method="post", action="/lumiere/").ui.form.block#createForm
            .content
              h3.ui.title.underline Create New Avalon Character
                a(href="/play/").right.label#loginExistingLink Existing Players
              .field.user
                .ui.input
                  label(for="create-username") Character Name
                  input#create-username(type="text", name="username", maxlength=18)
              .two.fields
                .field
                  .ui.input
                    label(for="create-password") Password
                    input#create-password(type="password", name="password", maxlength=50)
                .field
                  .ui.input
                    label(for="create-confirmpass") Confirm Password
                    input#create-confirmpass(type="password", name="confirmpass", maxlength=50)
              .field
                .ui.input
                  label(for="create-email") Email
                  input#create-email(type="text", name="email")
              .three.fields
                .field Gender
                .field.inline
                  input#male(type="radio", name="gender", value="male", checked="checked")
                  label(for="male") Male
                .field.inline
                  input#female(type="radio", name="gender", value="female")
                  label(for="female") Female
              input(type="hidden", name="run", value="lumiere", checked="checked")
              input(type="hidden", name="create", value="yes")
              input(type="hidden", name="loginkey", value="")
              button.ui.button.save.fluid(style="margin-top: 16px;") Create a new character

          .ui.block
            .content
              h3.ui.title.underline #{meta.information.title}
              ul.ui.menu
                for item in meta.information.items
                  li: a(href=item.url).item #{item.title}

          .ui.block
            .content
              p #{meta.search.title}
              form(action="/help/search").helpform
                .ui.fluid.icon.input
                  label HELP
                  input(type="text", name="page", list="pages")
                  i.search.icon
                    
          .ui.block
            .content
              ul.ui.menu.social.center
                for item in meta.links.items
                  if item.social
                    a(href=item.url, class="item social " + item.social, title=item.title)
                      i.icon.large(class=item.social)

  .ui.scroll
    ul.top
      for blurb,i in meta.blurbs
        li.dot(data-id=i)
    for blurb, i in meta.blurbs
      .content(data-id=i)
        .contain.large
          h3.ui.title= blurb.title
          if (blurb.subtitle)
            h4.ui.title.subtitle= blurb.subtitle
          p= blurb.description
          if (blurb.link)
            a(href=blurb.link.url).ui.button= blurb.link.text

block scripts
  script(src="/js/jquery.validate.min.js")
  script.
    $("#createForm").validate({
      onkeyup: false,
      rules: {
        username: {
          required: true,
          minlength: 3,
          remote: {
            url: "/api/checkname",
            data: {
              format: "boolean"
            }
          }
        },
        password: "required",
        confirmpass: {
          equalTo: "#create-password",
          required: true
        },
        email: "email",
      },
      messages: {
          username: {
            required: "This field is required",
            minlength: "Your username needs to be at least 3 characters",
            maxlength: "Your username needs to be less than 18 characters",
            remote: "You can't use this name, try another one."
          }
        }
    });

    $(document).ready(function() {
      var current = 0;
      var slides = $(".ui.scroll .content");
      var dots = $(".ui.scroll .top .dot");

      function next() {
        $(slides.get(current)).removeClass("active").addClass("prev");
        $(dots.get(current)).removeClass("active").addClass("prev");
        current++;
        $(dots.get(current)).removeClass("prev").addClass("active");
        $(slides.get(current)).removeClass("prev").addClass("active");
        if (current >= slides.length) {
          current = 0;
          dots.removeClass("prev active");
          slides.removeClass("prev active");
          $(dots.get(current)).addClass("active"); 
          $(slides.get(current)).addClass("active"); 
        }
      }

      dots.click(function(e) {
        var target = $(e.currentTarget);
        var id = target.data("id");
        current = parseInt(id);

        dots.removeClass("prev active");
        slides.removeClass("prev active");
        $(dots.get(current)).addClass("active"); 
        $(slides.get(current)).addClass("active"); 

        interval = clearInterval(interval);
      })

      $(slides.get(current)).addClass("active"); 
      $(dots.get(current)).addClass("active"); 

      var interval = setInterval(function () {
        next();
      }, 10000);
    })